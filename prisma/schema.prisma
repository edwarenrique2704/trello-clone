generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(true)
  password      String?

  accounts Account[]
  sessions Session[]

  // Relations
  Board Board[]
}

model Board {
  id         String   @id @default(uuid())
  title      String
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  lists     List[]
  listsOrder String[]
}

model List {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  cards Card[]
  cardsOrder String[]
}

model Card {
  id        String   @id @default(uuid())
  title     String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String
}
